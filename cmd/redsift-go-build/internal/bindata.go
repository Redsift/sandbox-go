// Code generated by go-bindata.
// sources:
// main___.go.tmpl
// DO NOT EDIT!

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _main___GoTmpl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x5d\x72\xe3\x36\x12\x7e\x26\x4e\xd1\x61\xc6\x13\x32\x45\x53\x9b\x64\x6b\x1f\x34\xd1\xc3\x64\xec\xcd\x4e\x95\x63\x4f\x59\x93\x4a\xa5\x1c\x97\x03\x13\x10\x8d\x98\x6a\x70\x00\x50\xb6\x4b\xe1\xd3\xee\x7d\x72\x87\x5c\x65\x2f\xb2\xd5\x00\x28\x51\x1e\x8d\x27\xa9\x8d\x1f\x2c\x11\x04\xfa\xe7\xeb\xaf\x1b\xdd\x6a\x79\x75\xcb\x6b\x09\x4b\xae\x90\x31\xb5\x6c\xb5\x71\x90\xb1\x24\x95\x58\x69\xa1\xb0\x9e\xfc\x62\x35\xa6\xb4\x60\x8c\x36\x96\xbe\x2d\x96\x8e\x3e\x1a\x5d\xd3\x87\xb6\xe1\xff\xc4\xaa\x1a\x79\x43\x0f\xa6\x43\xa7\x96\x72\x22\xe4\x75\xe7\xf7\x58\x67\x2a\x8d\x2b\xff\xf5\x01\xab\xe1\x73\xc2\x9d\x5e\xaa\xf8\x68\x2b\xde\xf8\xd3\x74\x34\x65\x2c\x49\x6b\xe5\x6e\xba\xeb\xb2\xd2\xcb\x89\x91\xc2\xaa\x85\x9b\xd4\xfa\x70\xc9\xb1\xd6\x56\x57\xb7\xe9\xc7\xb7\x4c\x90\xa3\xfe\xf0\x3e\xcb\x51\x5c\xeb\xfb\x43\xd3\x56\xa4\x70\x32\x01\x23\xdf\x75\xd2\x3a\x29\x00\xb5\x90\x96\x25\xeb\xf5\x21\x18\x8e\xb5\x84\x67\x6d\x01\xcf\x56\x30\x9d\x41\xf9\x86\xbb\x1b\x0b\x7d\xcf\x92\x74\xbd\x86\x67\x2d\xf4\x7d\x1a\xb6\x4a\x14\xb4\x9e\x33\x56\x69\xb4\x1e\xc9\xd7\x47\x27\xc7\xa0\xd0\x7d\xf5\x25\xcc\x40\x69\xc7\x59\xf2\xcd\xf7\xf3\x1f\x59\xf2\xea\xe4\x6c\x7e\x7c\x44\x7b\xdd\x43\x2b\xbd\x42\xb0\xce\x74\x95\x83\x35\x4b\x94\xb8\x07\xfa\x53\xe8\x58\x22\xa4\xad\xe8\xc1\x3a\xa3\xb0\x66\x49\x67\x1a\x18\x3f\x57\x7a\xd9\x76\x4e\xc2\xa2\xc3\x2a\x8b\x5e\x99\xb6\x2a\x5f\x85\xf5\xf3\xe0\x55\x0e\xd9\xc5\xe5\xbe\xb7\xb6\xd5\x68\x65\x01\x3e\xc4\x39\x4b\xac\xe3\x4e\x06\xdd\x5f\x7d\xc9\x12\x42\x92\xb4\x11\x98\xe5\xb9\x6c\x59\xcf\xd8\x8a\x1b\xb8\x45\x7d\x87\xa7\x84\x13\xcc\x60\xc9\xdb\x0b\x85\xee\xf2\x73\xf2\x63\xbd\x03\x9c\x2a\xe0\x19\x7a\xe0\xc2\x66\x02\x8e\x70\x53\xd0\xf7\x53\x58\x2b\x71\x3f\x85\xe1\xb9\x00\xf2\x75\x0a\x1e\x58\x2c\x8f\xc8\xf1\xbe\x4f\x0b\x88\x2e\x86\x9d\x58\xbe\xb9\xad\x4f\xf9\x52\x42\xdf\x0f\x6e\x40\x5f\xec\xc4\xa0\x67\x8c\xe0\x80\x4a\xe3\x42\xd5\x9d\x91\xf3\x07\xeb\xe4\xf2\x44\xd7\xb5\x34\x59\x0e\x9f\x37\xba\x2e\xc3\x13\xe1\x3d\x99\xc0\xdb\xb3\xa3\xb3\xed\x76\xb0\x0f\xb6\xd1\x35\x4b\x6e\x0a\xb8\x22\xeb\xb5\x2d\xff\xa5\xad\x43\xbe\x94\x59\xce\x12\x23\x5d\x67\x10\x48\xca\xa9\xbc\xcb\xb4\x2d\xe7\x4e\x48\x63\x0a\xb8\x29\xfc\xea\x89\x75\xe2\x9f\x0d\xaf\x6d\xbe\xb1\x85\xb2\x2c\xcb\x49\x1d\x89\x26\xa1\x1f\xb0\x8e\xb1\xc4\x13\xb0\x00\x61\x1e\xce\x3b\xf4\xb1\xd9\xd9\x4f\x0a\x5f\x9a\xda\x5e\x7c\x31\xbd\xcc\x59\xa2\x16\x7e\xc7\x27\x33\x40\xd5\x90\x02\xaf\xa1\x7c\x63\x14\xba\x45\x96\x2a\x5c\xf1\x46\x09\x88\xd1\xdf\x88\xe1\x4e\x69\x9c\xc2\x81\xfd\x09\x53\xaf\x23\x67\x49\xa2\x6d\x79\x7c\xaf\x5c\xf6\x45\xce\x92\x9e\x79\xd9\xc1\x8a\x47\x72\x1b\xcc\x7e\xfe\xfd\xb7\x9f\xae\xb2\xff\xfe\xfb\x3f\xf9\xd5\xe4\xf7\xdf\x68\x1b\x98\x0e\xcb\xb2\xfc\x99\x04\x05\x88\x82\x90\x05\x77\xbc\x21\x0f\x96\xfc\x56\x66\xd5\x0d\xc7\x48\xf6\x75\x9f\xb3\x84\xe8\x74\x57\x03\x15\x85\xf2\x07\xae\xdc\xb7\x46\x77\xad\x0f\x4a\xb5\xa8\x4b\x0f\x05\x18\xb9\x90\xc6\x82\xd3\x81\x78\xf0\x79\x58\xd6\xd8\x3c\xb0\x64\xa1\x0d\x5c\x15\xe0\x69\x16\x68\x17\xde\x92\xc5\x77\x75\xf9\x52\x08\xef\x4e\x52\xeb\x90\x24\xf1\xb8\x8f\x45\x92\x08\x12\x0d\x77\x75\x79\xa4\xd1\x07\x37\x49\xc6\xe8\x59\xc7\x8d\x53\x58\x87\x1c\x3d\xb0\xc0\xdd\x00\x19\x16\x80\x65\x67\x1a\x7f\x26\x06\x61\x3a\x03\x2c\x1b\x65\x9d\xc4\x97\x28\xe6\xd2\xac\x64\x96\xbf\x78\x1c\x9f\x47\x11\x1a\x44\xcb\x7b\x59\x75\x14\x15\x58\x70\xd5\x48\x31\x1d\x69\x8a\xf1\x49\x22\x98\x5f\x1f\x6e\x20\x5c\xf7\xb4\x4e\xff\xfa\x0c\x63\xd8\xac\xaa\xed\x2e\xe0\xc4\x51\x5f\xa4\x73\xff\x16\x79\x53\x9e\x6a\xa7\x16\x0f\x19\xed\x2d\x20\x16\xe1\x72\xfe\xfa\xdb\xd7\xa7\x6f\x77\x9e\xdf\x1e\x9f\x7f\x97\xb3\x0d\x7c\x01\x37\x8a\x9a\x55\xf5\x56\x2e\xd1\x43\x36\x32\x54\xb0\xa4\xe2\x56\xfa\xf7\x33\xf8\xfa\x90\x34\x4c\x1f\x03\x5b\x6b\x02\xf2\x05\x28\x54\x4e\x51\xcd\xb1\x37\x9d\x13\xfa\x0e\xbd\xc7\x56\xd5\xf9\x20\xe6\xeb\x43\xef\xf3\xae\x84\x06\x23\x6e\x01\xaa\x3d\x72\x52\x12\x40\xb0\x3c\xc5\x8f\x1d\x93\xaa\x46\xdb\x51\xa8\x03\xf4\x1e\x75\x2c\xe9\x5d\xa0\x47\xcf\x92\xde\x67\xe9\x5d\xed\xf9\x9a\x6d\x73\x7c\x4b\xad\xb9\xaf\xce\x59\x1e\xcb\x34\xe9\x8a\x45\x63\xb1\x74\xe5\xbc\x8d\x1a\x3f\x3d\x10\x70\xf0\x8e\xd4\x94\x4a\xdc\xd3\x07\x95\xc0\x7d\x02\x1f\x73\x2a\x14\x6c\x92\x1b\x08\xbc\xb5\x30\x64\x54\xc6\x92\x84\x58\xe7\xb7\xb1\x24\x59\xda\x1a\x2e\x2e\xaf\x1f\x9c\x64\x49\x1e\x12\x1b\x4b\xaa\xee\xa1\xbc\x10\x55\xe2\xc5\x49\x25\xed\x5c\xb6\x73\x5d\xdd\x4a\xb7\x87\xbc\x23\x3f\x8e\x49\x38\x01\xc7\xf1\x33\x07\xb5\x74\x80\xf2\x0e\x8c\x6c\xc1\xfa\xd3\x44\xe0\x4d\x6d\x89\xe5\x24\x68\x0b\xba\xcb\x57\x1a\x51\x56\x2e\x0b\x79\xf4\xc7\x55\x09\xc5\x1b\xd0\xf8\x94\x2a\x23\xdb\xe6\xe1\x07\xe5\x6e\xfc\x49\x8a\xbd\x67\xaf\x0c\x88\x14\x60\x1d\xaf\x6e\x23\x24\x23\x34\x13\x23\x6d\xbb\x29\xb9\xbe\x13\x92\x5e\x42\x26\x83\x0d\x59\x1e\xcf\x12\x17\xde\x2f\xbd\xfb\x6c\x0e\xc2\x87\xae\x6a\x94\xdc\xdb\xba\xdb\x07\x61\x57\xc5\x2e\x3e\x73\x89\x22\x23\x8b\xf6\xd4\x90\x7d\xe0\xe8\xae\x11\x84\x8f\xa5\x8b\x30\xa8\xf5\x38\xbc\xaf\x2c\x9e\x46\xd5\x04\xb8\x26\x13\x4f\xfb\xcf\xa8\xd6\xbe\x9b\x10\xae\x8d\xd6\x6d\x28\xae\xeb\x60\x9c\x6f\x80\x42\xdb\x56\x9e\x68\x2e\x5e\x53\x8b\x90\x3d\xc7\xd2\xf7\x0c\xf9\x0b\x58\xc1\x6c\x06\xa1\xb5\x09\x26\x5e\x1b\xc9\x6f\xa3\xc2\x78\x70\xee\xb4\x91\xbb\x27\x0b\xa0\x3e\x29\x0f\x24\x7d\x04\xc0\xb9\xac\x56\x59\xfe\x57\xe8\xff\x33\xa1\x32\xb2\x92\x6a\xe5\x63\x65\xf4\x72\x1f\xc3\x3e\xea\x12\xf5\x79\x94\x67\x89\x91\xef\x36\x74\x12\x92\xe8\x14\x5b\xb2\x6c\x69\xeb\xa7\x39\xb4\x4b\xe1\xcc\x37\x18\xa8\x9a\xa0\x9e\xea\xad\xd3\xed\x5b\xb5\x94\x5e\xb6\xbf\xa8\xfc\x53\x16\xee\x5f\x1b\x79\x5a\x6c\x2f\x26\xba\x60\x62\xcb\x94\x19\xf9\xce\xdb\xb7\x47\xbd\x5a\x80\x8d\x67\xf6\x99\x10\xd8\xff\x22\xec\xd9\xb9\xd5\xa2\xdd\xf4\x62\xb8\x93\x92\x4a\xa3\x53\xd8\xc9\xc1\xe8\x3d\xf9\x35\x74\xa1\x59\x34\x3a\x7a\x95\xe5\xff\x1f\x3c\xdb\x7c\x9a\xfe\x35\x09\xb5\x3f\x95\x7a\x36\x4e\xa6\xf7\x2b\x77\xac\xcb\xa4\xe3\x23\x0c\x66\x4f\x32\x2a\x10\x3b\xf4\x7b\x9e\xe9\x7e\xba\x78\xfe\x3c\xba\x36\x76\xe5\x6a\x54\x61\x87\x7b\xab\xdf\x63\xda\x23\x3e\xc0\x53\xe3\x83\x91\x16\x9e\x1e\x21\xc6\x15\x35\xe0\x1e\x86\x8a\xed\x25\x35\xea\x1f\xe4\xca\x05\x7e\x55\x7a\x15\x29\x4b\x91\x5e\xb9\x9d\x90\x04\x91\x94\x38\xd7\x5d\x5d\xce\xe9\xc9\xdf\x70\xe1\x6e\x9b\x05\x05\xd6\x37\xe1\x69\xcb\x51\x55\xe9\xd0\x8c\xad\x0a\xd0\xb7\x9e\x62\x2b\x57\x66\xc1\x90\x17\xb4\x14\x98\x1a\x8e\xaf\x36\x9d\xd3\x70\xa7\x7b\x06\x0e\x15\xa8\x1a\xa7\xca\xd0\xd1\x0e\x28\x8e\xf3\x6d\x70\xec\xe2\x52\xa1\xfb\xc7\xdf\x7d\x93\x4f\xaf\x49\x3f\x8d\xb4\xe5\xa9\xbe\x1b\xcd\x0d\xef\xef\x4e\xc4\x66\xeb\x5c\x61\x25\x33\x7f\x3c\xf7\x3d\x55\xa5\x51\xf8\x66\xce\xef\xce\x44\x39\x0f\x4b\x21\x3d\xa2\xc8\x28\x6b\x1d\xb7\x17\xc3\xe6\x1c\x0e\x21\xae\xf5\x63\x0e\x6c\x67\x09\x6e\x6a\x1f\x58\xdf\xa7\xf8\x31\xd1\x93\xa3\x80\x6b\xad\x9b\x62\x1c\xc2\x38\x8d\x5c\x85\x6a\xe3\xa7\xfa\xf2\x0d\x37\x56\x7e\xa3\x75\x43\x33\xc9\xb7\xd2\x49\x5c\x65\xe9\xd1\xf9\x8f\x69\x1e\x9b\x0c\x2f\x7e\x16\x42\xfa\xeb\xaf\xd0\x48\xf4\x1a\x73\x5a\xfb\xdb\xf8\x92\x47\xd5\xec\x4c\x3c\x9b\xb8\xa2\x8e\xfd\x9a\xd3\xb1\x43\x96\xe9\xd0\x4e\xb4\xd5\xb9\xd6\xae\x80\x85\xee\x50\xc4\x41\xed\x44\xeb\xdb\xae\x3d\x26\x43\x5e\xbf\x79\x75\x75\x7e\x76\xf6\x36\x0d\x59\xf3\x49\xd8\xf6\x47\x94\x4a\x5c\x29\xa3\x71\x29\xd1\xc1\x8a\x1b\xc5\xaf\x1b\x09\x83\x38\x40\xed\x82\xca\xc1\x10\xea\xb8\x82\x91\x11\x3e\xb6\x19\x4b\xb8\xa9\xb7\x8d\xa7\x47\xc3\x5f\xa7\xd4\xed\xc5\xd2\x34\x60\xf9\xd2\x69\x45\xe0\x3c\x5d\xf5\x76\x4c\xde\x5b\xab\x5a\x8a\x89\xd7\x7b\x60\x63\xb5\xe2\xa6\xde\xb9\xb9\x70\x04\xd9\x76\x94\xbf\x50\xe2\xfe\x32\x28\x1f\x41\xf5\x51\xc5\xdb\x1f\x4e\x9c\xa6\x11\x10\x38\x42\x87\xa3\x41\x0d\x3e\x3d\x10\x69\x01\x4a\xdc\x6f\xf4\x53\xbf\x07\xb3\xdd\x66\x58\xb5\xd5\x74\x32\x39\xb0\x93\x03\xe1\x6b\x17\x1d\x19\x02\x1c\xcf\x62\xfc\xc5\x81\xb7\x2d\x15\xf2\x38\x27\xe3\xa6\xe5\x0b\x86\xee\x4e\xcf\xe3\xaa\xfc\xe8\xbe\x11\xdc\xf1\x8f\x14\x35\x11\x07\xe5\x21\xc3\x7c\x86\x6c\x2a\x5c\x4c\x0d\x0a\x7f\x2b\x28\xf6\x1f\x16\xb5\x21\x84\xd8\xd2\xc1\xeb\x27\x8c\x7d\xa5\x10\x2c\x49\x5a\xb1\xf5\xae\x15\x05\x3c\x77\xf9\xf8\x86\xf9\xc5\x6a\x2c\xbf\xe3\xc6\xde\xf0\x66\xfc\x63\xcf\xa0\x84\x64\x9d\x75\x6e\x0a\x00\xad\x28\x58\x92\xcc\x1d\x77\x76\xea\x7f\xa1\x09\x19\x7e\x39\x54\x8a\xd4\x48\xdb\x35\xce\xa6\xd3\x8d\x8f\x7d\xc1\x92\x3e\x7f\x04\x56\xb8\x5c\x97\xd2\x5a\x5e\xcb\x38\xce\x3c\xee\x9e\xf7\x40\xf2\x27\x0c\xf6\x1a\x76\x6c\x0c\x1f\x9e\x7c\x69\xd4\x9c\x4e\x21\x7e\x2b\xfc\xb2\x37\x20\x9d\x6e\x7e\x08\xcb\x42\x57\xd2\x8f\xec\xdf\xed\xb6\xc8\x40\xbb\xb5\xf8\x83\x57\xdd\xd8\x89\x2a\xe4\xe7\x87\xb6\xd2\xe4\x1d\x73\xd8\xfb\xf9\x3d\x2e\xa3\xa7\x5e\x59\x01\xcf\x2b\xb3\xad\xfa\x95\xf1\xa2\x59\xcf\xfe\x17\x00\x00\xff\xff\x90\x8b\xad\xf4\x79\x15\x00\x00"

func main___GoTmplBytes() ([]byte, error) {
	return bindataRead(
		_main___GoTmpl,
		"main___.go.tmpl",
	)
}

func main___GoTmpl() (*asset, error) {
	bytes, err := main___GoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main___.go.tmpl", size: 5497, mode: os.FileMode(420), modTime: time.Unix(1544384159, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"main___.go.tmpl": main___GoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"main___.go.tmpl": &bintree{main___GoTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

